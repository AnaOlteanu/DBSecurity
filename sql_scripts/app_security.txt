-----------------------------
--a. CONTEXTUL APLICATIEI
-----------------------------
------------------
--CONECTAT CA SYS
------------------

--crearea unui context de aplicatie care stabileste, ca masura de securitate, introducerea sau modificarea conturilor
--de catre consultantii bancari numai in intervalul orar de functionare a bancii, intre orele 8:00-17:00

set serveroutput on;

show con_name;

alter session set container = cdb$root;

GRANT execute ON dbms_session TO SYS;
GRANT ALL ON DBMS_CRYPTO TO SYS;

GRANT execute ON dbms_session TO bank_admin;
GRANT execute ON dbms_session TO bank_consultant1;

GRANT CREATE TRIGGER TO bank_admin;

alter session set container = orclpdb;


create context banca_ctx using proced_banca_ctx;

drop context banca_ctx;

drop procedure sys.proced_banca_ctx;


create or replace procedure proced_banca_ctx 
is
    v_ora number(3);
begin

    select to_number(to_char(sysdate, 'hh24')) into v_ora from dual;
    
    dbms_output.put_line('Este ora: ' || v_ora);
      
    if v_ora < 8 or v_ora > 17 then
        dbms_output.put_line('Sunteti in afara orelor de program.');
        dbms_session.set_context('banca_ctx', 'ora_potrivita', 'nu');
    else 
        dbms_session.set_context('banca_ctx', 'ora_potrivita', 'da');
    end if;
end;
/

select sys_context('banca_ctx', 'ora_potrivita') from dual;

exec proced_banca_ctx;

create or replace trigger tr_after_logon
after logon on database
declare
  v_user varchar2(30);
begin
  v_user := sys_context('userenv', 'session_user');
  
  dbms_output.put_line('userul este ' || v_user );
  
  
  if lower(v_user) like '%bank_consultant1%' then
    proced_banca_ctx;
  end if;
end;
/


drop trigger sys.tr_after_logon;

select sys_context('userenv', 'session_user') from dual;

-----------------------------
--CONECTAT CA BANK_ADMIN
-----------------------------
--trigger prin care se verifica in context daca ora permite introducerea sau modificarea conturilor

set serveroutput on;

select * from session_privs;
select * from session_roles;
select * from user_tab_privs;
select * from user_col_privs;


create or replace trigger tr_insert_update_cont
before insert or update on bank_admin.cont
for each row
declare
  v_poate varchar2(4);
begin
 
    v_poate := sys_context('banca_ctx', 'ora_potrivita');

    if (v_poate = 'nu') then
        dbms_output.put_line ('Nu aveti voie sa modificati conturile in afara orelor de program');
        :new.sold := :old.sold;
    end if;
end;
/

drop trigger tr_insert_update_cont;

commit;

create or replace procedure update_cont(p_id_cont number, p_id_sold number)
is
begin
    update bank_admin.cont
    set sold = p_id_sold
    where id_cont = p_id_cont;

exception 
    when others then
    dbms_output.put_line('Eroare: ' || sqlerrm);
end;
/

grant execute on update_cont to bank_consultant1;

commit;


------------------------------
--CONECTAT CA BANK_CONSULTANT1
------------------------------
set serveroutput on;

select * from session_privs;
select * from session_roles;
select * from user_tab_privs;
select * from user_col_privs;

select * from bank_admin.cont;

update bank_admin.cont
set sold = 1000
where id_cont = 4;

rollback;

execute bank_admin.update_cont(1, 90);

select sys_context('userenv', 'session_user') from dual;



--------------------------------------
--b. SQL INJECTION
--------------------------------------

-------------------------
--CONECTAT CA BANK_ADMIN
-------------------------
--procedura predispusa atacurilor malitioase prin care se afiseaza date despre cardurile emise dupa o anumita data furnizata ca parametru

desc bank_admin.card;


create or replace procedure afiseaza_carduri(p_data varchar2)
as
    TYPE vector_carduri IS TABLE OF bank_admin.card%ROWTYPE;
    v_vector vector_carduri;
begin

    EXECUTE IMMEDIATE 'select c.id_card, c.id_tip_card, c.id_tip_status, c.id_cont, c.numar, c.data_emitere, c.data_expirare, c.cvc, c.pin
                        from bank_admin.card c
                        join bank_admin.cont co on(c.id_cont = co.id_cont)
                        join bank_admin.client_cont cc on(co.id_cont = cc.id_cont)
                        join bank_admin.client cl on(cl.id_client = cc.id_client)
                        where to_char(c.data_emitere,''DD-MON-YY'') > ''' || p_data || ''' 
                        order by id_card'
    bulk collect into v_vector;
    
    
    for i in 1..v_vector.COUNT loop
        DBMS_OUTPUT.PUT_LINE('id card: ' || v_vector(i).id_card || ', tip card: ' || v_vector(i).id_tip_card 
        || ', status card: ' || v_vector(i).id_tip_status || ', id cont:' || v_vector(i).id_cont ||
        ', numar:' ||  v_vector(i).numar || ', data emitere: ' || v_vector(i).data_emitere || ', data expirare: ' || v_vector(i).data_expirare
        || ', cvc: ' || v_vector(i).cvc || ', pin: ' || v_vector(i).pin);
    end loop;

end;
/

grant execute on afiseaza_carduri to bank_consultant1;


--pentru o mai buna protectie impotriva atacurilor de tip SQL Injection voi utiliza variabile de legatura (bind variables)


create or replace procedure afiseaza_carduri_safe(p_data varchar2)
as
    TYPE vector_carduri IS TABLE OF bank_admin.card%ROWTYPE;
    v_vector vector_carduri;
begin

    EXECUTE IMMEDIATE 'select c.id_card, c.id_tip_card, c.id_tip_status, c.id_cont, c.numar, c.data_emitere, c.data_expirare, c.cvc, c.pin
                        from bank_admin.card c
                        join bank_admin.cont co on(c.id_cont = co.id_cont)
                        join bank_admin.client_cont cc on(co.id_cont = cc.id_cont)
                        join bank_admin.client cl on(cl.id_client = cc.id_client)
                        where to_char(c.data_emitere,''DD-MON-YY'') > :data 
                        order by id_card'
    bulk collect into v_vector
    using p_data;
    
    
    for i in 1..v_vector.COUNT loop
        DBMS_OUTPUT.PUT_LINE('id card: ' || v_vector(i).id_card || ', tip card: ' || v_vector(i).id_tip_card 
        || ', status card: ' || v_vector(i).id_tip_status || ', id cont:' || v_vector(i).id_cont ||
        ', numar:' ||  v_vector(i).numar || ', data emitere: ' || v_vector(i).data_emitere || ', data expirare: ' || v_vector(i).data_expirare
        || ', cvc: ' || v_vector(i).cvc || ', pin: ' || v_vector(i).pin);
    end loop;

end;
/

grant execute on afiseaza_carduri_safe to bank_consultant1;


------------------------------
--CONECTAT CA BANK_CONSULTANT1
------------------------------
set serveroutput on;


--varianta nesigura
execute bank_admin.afiseaza_carduri('17-MAY-03');

--utilizatorul poate afla date despre toate cardurile
execute bank_admin.afiseaza_carduri('17-MAY-03'' OR 1=1--');

--utilizatorul poate afla date numai despre cardurile ce respecta o anumita conditie
execute bank_admin.afiseaza_carduri('17-MAY-03'' and c.id_cont in (select id_cont from bank_admin.cont where sold > 5000)--');


--varianta sigura
execute bank_admin.afiseaza_carduri_safe('17-MAY-03');

execute bank_admin.afiseaza_carduri_safe('17-MAY-03'' OR 1=1--');

execute bank_admin.afiseaza_carduri_safe('17-MAY-03'' and c.id_cont in (select id_cont from bank_admin.cont where sold > 5000)--');







